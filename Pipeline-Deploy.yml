trigger: none
pr: none

parameters:
  - name: releaseTo
    type: string
    default: 'KB'
    values: ['KB','BB']
  - name: SourceRepo
    displayName: 'Full UNC path of the MSI repo (no trailing "\") e.g. \\kbshares.corp.bank.nzpfs.co.nz\releases\_Drop\Activate'
    type: string
    default: ''

variables:
  - group: Activate-SIT
  - ${{ if eq(parameters.releaseTo, 'KB') }}:
    - name: BrandFolder
      value: 'ActivateKB'
  - ${{ if eq(parameters.releaseTo, 'BB') }}:
    - name: BrandFolder
      value: 'ActivateBB'
  - name: Effective_MsiFolderLocation
    value: '$(MECM_MsiFolderLocation)\$(BrandFolder)'

stages:
  # 0) Copy brand MSI to MECM_MsiFolderLocation\<BrandFolder> on SIT (tag: Activate)
  - stage: Upload_MSI
    displayName: '[SIT] Copy ${{ parameters.releaseTo }} MSI → $(Effective_MsiFolderLocation)'
    jobs:
      - deployment: CopyFromUNC
        displayName: 'Copy KB/BB MSI'
        environment:
          name: 'SIT'
          resourceType: virtualMachine
          tags: 'Activate'
        strategy:
          runOnce:
            deploy:
              steps:
                # --- Fix Git schannel revocation failure BEFORE checkout ---
                - powershell: |
                    git --version
                    git config --global http.proxy "http://kbsvrpxy-sit.corp.bank.sit.kiwibank.internal:8080"
                    git config --global http.schannelCheckRevoke false
                    git config --global -l
                  displayName: 'Configure Git (proxy + disable revocation check)'

                - checkout: self

                - task: PowerShell@2
                  name: copy
                  displayName: 'Copy brand MSI to destination'
                  inputs:
                    targetType: 'filePath'
                    filePath: '$(Build.SourcesDirectory)\scripts\UploadMSI.ps1'
                    arguments: >
                      -SourceRoot "${{ parameters.SourceRepo }}"
                      -DestinationRoot "$(MECM_MsiFolderLocation)"
                      -Brand "${{ parameters.releaseTo }}"
                    pwsh: false

  # 1) Detect MSI ProductVersion from the brand folder → $(revisionVersion) on SIT
  - stage: Detect_Version
    displayName: '[SIT] Detect MSI ProductVersion'
    dependsOn: Upload_MSI
    jobs:
      - deployment: SetVersion
        displayName: 'Read ProductVersion'
        environment:
          name: 'SIT'
          resourceType: virtualMachine
          tags: 'Activate'
        strategy:
          runOnce:
            deploy:
              steps:
                # If you want to be extra safe, keep the config here too
                - powershell: |
                    git config --global http.schannelCheckRevoke false
                  displayName: 'Ensure Git revocation check is off'

                - checkout: self

                - task: PowerShell@2
                  name: detect
                  displayName: 'Detect ProductVersion from MSI'
                  inputs:
                    targetType: 'filePath'
                    filePath: '$(Build.SourcesDirectory)\scripts\Detect-MsiVersion.ps1'
                    arguments: >
                      -Folder "$(Effective_MsiFolderLocation)"
                      -Filter "*.msi"
                      -VariableName "revisionVersion"
                      -SetBuildNumber
                    pwsh: false

  # 2) Bootstrap: copy PS helper scripts on SIT
  - stage: Bootstrap_Scripts
    displayName: '[SIT] Bootstrap scripts'
    dependsOn:
      - Upload_MSI
      - Detect_Version
    jobs:
      - deployment: CopyHelpers
        displayName: 'Copy helper scripts'
        environment:
          name: 'SIT'
          resourceType: virtualMachine
          tags: 'Activate'
        strategy:
          runOnce:
            deploy:
              steps:
                - powershell: |
                    git config --global http.schannelCheckRevoke false
                  displayName: 'Ensure Git revocation check is off'

                - checkout: self

                - powershell: |
                    New-Item -ItemType Directory -Path "$(Pipeline.Workspace)\Cache" -Force | Out-Null
                    Copy-Item "$(Build.SourcesDirectory)\scripts\*.ps1" "$(Pipeline.Workspace)\Cache" -Force
                  displayName: 'Copy PS scripts to $(Pipeline.Workspace)\Cache'
